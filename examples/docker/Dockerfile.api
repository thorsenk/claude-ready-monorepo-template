# Multi-stage build for NestJS API application
FROM node:20-alpine AS base

# Install pnpm and system dependencies
RUN npm install -g pnpm
RUN apk add --no-cache libc6-compat

# Stage 1: Dependencies
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./
COPY apps/api/package.json ./apps/api/
COPY packages/*/package.json ./packages/*/

# Install dependencies
RUN pnpm install --frozen-lockfile --prod=false

# Stage 2: Build
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Generate Prisma client
RUN pnpm --filter=api prisma:generate

# Build the application
RUN pnpm build --filter=api

# Remove dev dependencies
RUN pnpm install --frozen-lockfile --prod

# Stage 3: Runner
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Create non-root user
RUN addgroup --system --gid 1001 api
RUN adduser --system --uid 1001 api

# Copy built application and dependencies
COPY --from=builder --chown=api:api /app/apps/api/dist ./dist
COPY --from=builder --chown=api:api /app/node_modules ./node_modules
COPY --from=builder --chown=api:api /app/apps/api/package.json ./package.json

# Copy Prisma files
COPY --from=builder --chown=api:api /app/apps/api/prisma ./prisma

USER api

EXPOSE 3001

ENV PORT 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Run database migrations and start server
CMD ["sh", "-c", "npx prisma migrate deploy && node dist/main.js"]